defaults:
  run:
    working-directory: "dev-deployment"

name: Spring Boot Deployment

on:
  workflow_dispatch:

env:
  image_tag: latest
  environment: development
  project_id: off-net-dev
  repo_name: lendly-demo

jobs:
  Build:
    runs-on: ubuntu-latest
    environment:
      name: Development
      url: "http://dev.test_demoApp.com"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: google-github-actions/auth@v1
        id: auth
        with:
          credentials_json: ${{ secrets.GCP_SA }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Deploy to Dev Enviroment
        if: github.ref == 'refs/heads/dev-deployment' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve \
            -var="environment=${{ env.environment }}" \
            -var="image_tag=${{ env.image_tag }}" \
            -var="project_id=${{ env.project_id }}" \
            -var="repo_name=${{ env.repo_name }}"
